Problem:

Given an array contains N numbers of 0 .. N, find which number doesn't exist in the array.

Have you met this question in a real interview? Yes
Example
Given N = 3 and the array [0, 1, 3], return 2.

// mine: 

public class Solution {
    /*
     * @param T1: The roots of binary tree T1.
     * @param T2: The roots of binary tree T2.
     * @return: True if T2 is a subtree of T1, or false.
     */
    public boolean isSubtree(TreeNode T1, TreeNode T2) {
        // write your code here
        if (T2== null ) return true; 
        if (T1== null ) return false; 
        
        
        if (isEqual (T1, T2)) return true; 
        
        else return isSubtree(T1.left, T2) || isSubtree(T1.right,T2);
        
    }
    
    private boolean isEqual (TreeNode T1, TreeNode T2){
        if ( T1==null || T2==null) return T1==T2;
        if (T1.val != T2.val ) return false; 
        
        return isEqual(T1.left, T2.left) && isEqual(T1.right, T2.right);
        
        
    }
}
// 9 chapter:
public class Solution {
    /**
     * @param T1, T2: The roots of binary tree.
     * @return: True if T2 is a subtree of T1, or false.
     */
    public boolean isSubtree(TreeNode T1, TreeNode T2) {
        if (T2 == null) {
            return true;
        }
        if (T1 == null) {
            return false;
        }
        
        if (isEqual(T1, T2)) {
            return true;
        }
        if (isSubtree(T1.left, T2) || isSubtree(T1.right, T2)) {
            return true;
        }
        return false;
    }
    
    private boolean isEqual(TreeNode T1, TreeNode T2) {
        if (T1 == null || T2 == null) {
            return T1 == T2;
        }
        if (T1.val != T2.val) {
            return false;
        }
        return isEqual(T1.left, T2.left) && isEqual(T1.right, T2.right);
    }
}
