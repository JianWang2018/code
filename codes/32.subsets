problem:

Given a set of distinct integers, return all possible subsets.

 Notice

Elements in a subset must be in non-descending order.
The solution set must not contain duplicate subsets.
Have you met this question in a real interview? Yes
Example
If S = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

key:1) recursion, deep copy and back tracking. 2) use binary bit method. 


mine:

public class Solution {
    
    /*
     * @param nums: A set of numbers
     * @return: A list of lists
     */
    public List<List<Integer>> subsets(int[] nums) {
       List<List<Integer>> res= new ArrayList<>(); 
       // if nums == null return []
       
       if (nums==null) return res;
       
       if (nums.length==0) {
           res.add(new ArrayList<Integer>());
           return res;
       }
       
       List<Integer> subset = new ArrayList<Integer>();
       Arrays.sort(nums);
       helper(res,subset,nums,0); 
       
       return res; 
       
        
    }
    
    private void helper(List<List<Integer>> res, List<Integer> subset,
    int [] nums,int pos){
        // deep copy of subset
        res.add(new ArrayList<Integer>(subset));
        
        for( int i = pos; i<nums.length;i++){
            subset.add(nums[i]);
            // shoule be i+1
            helper(res,subset,nums, i+1);
            // back tracking
            subset.remove(subset.size()-1);
        }
        
        
        
    }
}

// non recursion

public class Solution {
    
    /*
     * @param nums: A set of numbers
     * @return: A list of lists
     */
    public List<List<Integer>> subsets(int[] nums) {
       List<List<Integer>> res= new ArrayList<>(); 
       // if nums == null return []
       
       if (nums==null) return res;
       
       if (nums.length==0) {
           res.add(new ArrayList<Integer>());
           return res;
       }
       
       Arrays.sort(nums);
       
       int n=nums.length; 
       for ( int i = 0 ; i <(1<<n); i++){
           List<Integer> subset=new ArrayList<Integer>();
           for (int j = 0 ; j <n;  j++){
               if ((i & (1<<j))!=0) subset.add(nums[j]);
           }
           
           res.add(new ArrayList<Integer>(subset));
       }
       
        return res;
    }
    
    
}

9 chapter


// 递归：实现方式，一种实现DFS算法的一种方式
class Solution {
    /**
     * @param S: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> results = new ArrayList<>();
        
        if (nums == null) {
            return results;
        }
        
        if (nums.length == 0) {
            results.add(new ArrayList<Integer>());
            return results;
        }
        
        Arrays.sort(nums);
        helper(new ArrayList<Integer>(), nums, 0, results);
        return results;
    }
    
    
    // 递归三要素
    // 1. 递归的定义：在 Nums 中找到所有以 subset 开头的的集合，并放到 results
    private void helper(ArrayList<Integer> subset,
                        int[] nums,
                        int startIndex,
                        List<List<Integer>> results) {
        // 2. 递归的拆解
        // deep copy
        // results.add(subset);
        results.add(new ArrayList<Integer>(subset));
        
        for (int i = startIndex; i < nums.length; i++) {
            // [1] -> [1,2]
            subset.add(nums[i]);
            // 寻找所有以 [1,2] 开头的集合，并扔到 results
            helper(subset, nums, i + 1, results);
            // [1,2] -> [1]  回溯
            subset.remove(subset.size() - 1);
        }
        
        // 3. 递归的出口
        // return;
    }
}

// Non Recursion
class Solution {
    /**
     * @param S: A set of numbers.
     * @return: A list of lists. All valid subsets.
     */
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        int n = nums.length;
        Arrays.sort(nums);
        
        // 1 << n is 2^n
        // each subset equals to an binary integer between 0 .. 2^n - 1
        // 0 -> 000 -> []
        // 1 -> 001 -> [1]
        // 2 -> 010 -> [2]
        // ..
        // 7 -> 111 -> [1,2,3]
        for (int i = 0; i < (1 << n); i++) {
            List<Integer> subset = new ArrayList<Integer>();
            for (int j = 0; j < n; j++) {
                // check whether the jth digit in i's binary representation is 1
                if ((i & (1 << j)) != 0) {
                    subset.add(nums[j]);
                }
            }
            result.add(subset);
        }
        return result;
    }
}




